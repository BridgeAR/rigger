{"body":"# Rigger\r\n\r\nRigger is a build time include engine for Javascript, CSS, CoffeeScript and in general any type of text file that you wish to might want to \"include\" other files into.\r\n\r\n<a href=\"http://travis-ci.org/#!/buildjs/rigger\"><img src=\"https://secure.travis-ci.org/buildjs/rigger.png\" alt=\"Build Status\"></a>\r\n\r\nIt was created to make the process of creating Javascript libraries a more structured process, but can be used for other tasks also. \r\n\r\nAs a developer you are encouraged to write modular, reusable code but when it comes to writing client-side applications your ability to do this effectively is generally hampered by what I call the _single-file principle_.  In most cases a good programmer rages against this and implements some kind of custom `Makefile`, [ant build](http://ant.apache.org/) or [Rakefile](http://rake.rubyforge.org/) to help with their build.\r\n\r\nThe \"build\" process, however, generally involves taking a number of files and concatenating them together in a sensible order.  I, however, wanted something more flexible.  To be precise, I wanted the following:\r\n\r\n- The ability to inject a file into specific line in another file.\r\n- The ability to reuse code from other libraries.\r\n- The ability to do includes from the web (namely github repos)\r\n\r\nThis is the functionality that Rigger provides.  It was originally built 6 months ago as part of [Interleave](/DamonOehlman/interleave) but has it's own identity, tests and is generally better.\r\n\r\n## Using Rigger\r\n\r\nFirst you will want to install it.  You'll need [npm](http://npmjs.org) to do this, once you do you can simply run `npm install -g rigger`. To get starting using rigger, you simply start placing special __include comments__ in a file that you want rigger to process.\r\n\r\n__Javascript:__\r\n\r\n```js\r\n//= includes/test\r\n```\r\n\r\n__CoffeeScript:__\r\n\r\n```coffee\r\n#= includes/test\r\n```\r\n\r\n__CSS:__\r\n\r\n```css\r\n/*= includes/test */\r\n```\r\n\r\nNotice that each of the examples is using single-line comments (even if they are a block comment in the case of the CSS example).  This is important to note as Rigger parses files on a __line by line__ basis rather through through tokenizing.  If you use block comments like the following CSS example, it won't work:\r\n\r\n```css\r\n/*=\r\nincludes/test1\r\nincludes/test2\r\n*/\r\n```\r\n\r\nOnce you have a file that is has been properly rigged, you can use the `rig` command line tool to turn a rigged file into it's big brother:\r\n\r\n```\r\nrig input.js > output.js\r\n```\r\n\r\n## Include All the Things\r\n\r\nRigger supports a number of special include formats, and these are demonstrated in examples below.  While JS examples are provided, the formats will work in any of the known file formats.\r\n\r\n### Remote Resources\r\n\r\nRemote resources are those stored accessible via HTTP (or HTTPS).  \r\n\r\n__HTTP(S) Include:__\r\n\r\n```js\r\n// include jquery from the CDN so you can run offline perhaps...\r\n//= http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\r\n```\r\n\r\n__Github Include:__\r\n\r\n```js\r\n//= github://DamonOehlman/alignit/alignit.js\r\n```\r\n\r\n### Multiple File Include\r\n\r\nBeing lazy is ok.  Rigger provides some nice shortcuts to help you in your quest:\r\n\r\n__Directory Includes:__\r\n\r\nSimply specify a directory in the include string and all files of the same type as the currently parsed file will be included.  In the tests/input directory have a look for the `local-includedir.js` and `local-includedir.css` files.\r\n\r\n```js\r\n//= ../includes/testdir\r\n```\r\n\r\n__Cherrypick Include:__\r\n\r\nIn some instances you may want to cherrypick particular files from a directory / remote repository.  Rather than typing multiple include lines, you can simply type one statement and use square brackets to signal to Rigger that you want to include multiple files:\r\n\r\n```js\r\n//= ../includes/testdir[a, b]\r\n```\r\n\r\n## Plugin Support\r\n\r\nIn addition to including files you can also use some plugins to extend the core functionality.  To flag that you want to use a plugin in your core files, use add the word plugin __directly__ after the `=` in the comment (e.g. `//=plugin name params`, `/*=plugin name params */`, `#=plugin name params`, etc).\r\n\r\n### shim plugin\r\n\r\nThe shim plugin allows to you require specific ES5 shims that you wish to include into your code so IE doesn't go and break on you:\r\n\r\n```js\r\n//=shim String.trim Array.indexOf\r\n```\r\n\r\nThe shim contents are sourced from the [buildjs/shims](https://github.com/buildjs/shims) repository, which is currently incomplete so feel free to help out by adding appropriate shims.\r\n\r\n## Programmatic Use\r\n\r\nTo be completed.\r\n\r\n## Streams FTW!\r\n\r\nOne of the simplest ways of composing process flows in node is to use streams, and while Interleave does not support a streaming interface, Rigger inherits from the node [Stream](http://nodejs.org/docs/latest/api/stream.html).\r\n\r\nThis means that you can do all kinds of things prior to rigging in your inline dependencies and all kinds of things afterwards to.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Rigger","tagline":"Javascript file parser and include engine #buildjs #node","google":""}